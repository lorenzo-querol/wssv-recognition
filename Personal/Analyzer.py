# Form implementation generated from reading ui file 'Analyzer.ui'
#
# Created by: PyQt6 UI code generator 6.2.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from analyzerFunctions import *


class Ui_Analyzer(object):
    def setupUi(self, Analyzer):
        Analyzer.setObjectName("Analyzer")
        Analyzer.resize(900, 666)
        self.centralwidget = QtWidgets.QWidget(Analyzer)
        self.centralwidget.setObjectName("centralwidget")
        self.imageLabel = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel.setGeometry(QtCore.QRect(200, 140, 500, 500))
        self.imageLabel.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.imageLabel.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.imageLabel.setLineWidth(3)
        self.imageLabel.setText("")
        self.imageLabel.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignTop
        )
        self.imageLabel.setObjectName("imageLabel")
        self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        self.resetButton.setGeometry(QtCore.QRect(10, 590, 181, 51))
        font = QtGui.QFont()
        font.setBold(True)
        self.resetButton.setFont(font)
        self.resetButton.setObjectName("resetButton")
        self.channelSelector = QtWidgets.QComboBox(self.centralwidget)
        self.channelSelector.setGeometry(QtCore.QRect(10, 420, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setKerning(True)
        self.channelSelector.setFont(font)
        self.channelSelector.setEditable(False)
        self.channelSelector.setObjectName("channelSelector")
        self.channelSelector.addItem("")
        self.channelSelector.addItem("")
        self.channelSelector.addItem("")
        self.channelSelector.addItem("")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 140, 181, 261))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.colorSpaceLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.colorSpaceLayout.setSizeConstraint(
            QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint
        )
        self.colorSpaceLayout.setContentsMargins(0, 0, 0, 0)
        self.colorSpaceLayout.setSpacing(4)
        self.colorSpaceLayout.setObjectName("colorSpaceLayout")
        self.cmyButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.cmyButton.setFont(font)
        self.cmyButton.setObjectName("cmyButton")
        self.colorSpaceLayout.addWidget(self.cmyButton)
        self.grayButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.grayButton.setFont(font)
        self.grayButton.setObjectName("grayButton")
        self.colorSpaceLayout.addWidget(self.grayButton)
        self.hsvButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.hsvButton.setFont(font)
        self.hsvButton.setObjectName("hsvButton")
        self.colorSpaceLayout.addWidget(self.hsvButton)
        self.luvButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.luvButton.setFont(font)
        self.luvButton.setObjectName("luvButton")
        self.colorSpaceLayout.addWidget(self.luvButton)
        self.openImageButton = QtWidgets.QPushButton(self.centralwidget)
        self.openImageButton.setGeometry(QtCore.QRect(10, 530, 181, 51))
        font = QtGui.QFont()
        font.setBold(True)
        self.openImageButton.setFont(font)
        self.openImageButton.setObjectName("openImageButton")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(30, 30, 181, 86))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.filterLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.filterLayout.setContentsMargins(0, 0, 0, 0)
        self.filterLayout.setObjectName("filterLayout")
        self.averageBlurButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.averageBlurButton.setFont(font)
        self.averageBlurButton.setObjectName("averageBlurButton")
        self.filterLayout.addWidget(self.averageBlurButton, 0, 0, 1, 1)
        self.medianBlurButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.medianBlurButton.setFont(font)
        self.medianBlurButton.setObjectName("medianBlurButton")
        self.filterLayout.addWidget(self.medianBlurButton, 1, 0, 1, 1)
        self.gaussianButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.gaussianButton.setFont(font)
        self.gaussianButton.setObjectName("gaussianButton")
        self.filterLayout.addWidget(self.gaussianButton, 1, 1, 1, 1)
        self.sharpenButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        self.sharpenButton.setFont(font)
        self.sharpenButton.setObjectName("sharpenButton")
        self.filterLayout.addWidget(self.sharpenButton, 0, 1, 1, 1)
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(580, 30, 291, 86))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.thresholdLayout = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.thresholdLayout.setContentsMargins(0, 0, 0, 0)
        self.thresholdLayout.setObjectName("thresholdLayout")
        self.binaryThresholdButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.binaryThresholdButton.setFont(font)
        self.binaryThresholdButton.setObjectName("binaryThresholdButton")
        self.thresholdLayout.addWidget(self.binaryThresholdButton, 0, 0, 1, 1)
        self.adaptiveThresholdButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.adaptiveThresholdButton.setFont(font)
        self.adaptiveThresholdButton.setObjectName("adaptiveThresholdButton")
        self.thresholdLayout.addWidget(self.adaptiveThresholdButton, 0, 1, 1, 1)
        self.otsuThresholdButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.otsuThresholdButton.setFont(font)
        self.otsuThresholdButton.setObjectName("otsuThresholdButton")
        self.thresholdLayout.addWidget(self.otsuThresholdButton, 1, 0, 1, 2)
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(250, 30, 291, 86))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.edgeDetectLayout = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.edgeDetectLayout.setContentsMargins(0, 0, 0, 0)
        self.edgeDetectLayout.setObjectName("edgeDetectLayout")
        self.sobelButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(False)
        self.sobelButton.setFont(font)
        self.sobelButton.setObjectName("sobelButton")
        self.edgeDetectLayout.addWidget(self.sobelButton, 0, 0, 1, 1)
        self.logButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(False)
        self.logButton.setFont(font)
        self.logButton.setObjectName("logButton")
        self.edgeDetectLayout.addWidget(self.logButton, 1, 0, 1, 1)
        self.cannyButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(False)
        self.cannyButton.setFont(font)
        self.cannyButton.setObjectName("cannyButton")
        self.edgeDetectLayout.addWidget(self.cannyButton, 1, 1, 1, 1)
        self.laplaceButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(False)
        self.laplaceButton.setFont(font)
        self.laplaceButton.setObjectName("laplaceButton")
        self.edgeDetectLayout.addWidget(self.laplaceButton, 0, 1, 1, 1)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(710, 140, 181, 261))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.morphLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.morphLayout.setSizeConstraint(
            QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint
        )
        self.morphLayout.setContentsMargins(0, 0, 0, 0)
        self.morphLayout.setSpacing(4)
        self.morphLayout.setObjectName("morphLayout")
        self.erodeButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.erodeButton.setFont(font)
        self.erodeButton.setObjectName("erodeButton")
        self.morphLayout.addWidget(self.erodeButton)
        self.dilateButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.dilateButton.setFont(font)
        self.dilateButton.setObjectName("dilateButton")
        self.morphLayout.addWidget(self.dilateButton)
        self.openButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.openButton.setFont(font)
        self.openButton.setObjectName("openButton")
        self.morphLayout.addWidget(self.openButton)
        self.closeButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setBold(False)
        self.closeButton.setFont(font)
        self.closeButton.setObjectName("closeButton")
        self.morphLayout.addWidget(self.closeButton)
        self.confirmButton = QtWidgets.QPushButton(self.centralwidget)
        self.confirmButton.setGeometry(QtCore.QRect(60, 470, 75, 24))
        self.confirmButton.setObjectName("confirmButton")
        self.openImageButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.openImageButton_2.setGeometry(QtCore.QRect(710, 400, 181, 51))
        font = QtGui.QFont()
        font.setBold(True)
        self.openImageButton_2.setFont(font)
        self.openImageButton_2.setObjectName("openImageButton_2")
        Analyzer.setCentralWidget(self.centralwidget)

        self.retranslateUi(Analyzer)
        QtCore.QMetaObject.connectSlotsByName(Analyzer)
        self.channelSelector.activated.connect(self.channelSelectorMethod)
        self.openImageButton.clicked.connect(self.openImageButtonMethod)
        self.confirmButton.clicked.connect(self.confirmImageMethod)
        self.resetButton.clicked.connect(self.resetImageMethod)

        self.cmyButton.clicked.connect(self.cmyConvertMethod)
        self.grayButton.clicked.connect(self.grayConvertMethod)
        self.hsvButton.clicked.connect(self.hsvConvertMethod)
        self.luvButton.clicked.connect(self.luvConvertMethod)

        self.averageBlurButton.clicked.connect(self.averageBlurMethod)
        self.medianBlurButton.clicked.connect(self.medianBlurMethod)
        self.gaussianButton.clicked.connect(self.gaussianBlurMethod)
        self.sharpenButton.clicked.connect(self.sharpenMethod)

        self.sobelButton.clicked.connect(self.sobelMethod)
        self.laplaceButton.clicked.connect(self.laplacianMethod)
        self.logButton.clicked.connect(self.logMethod)
        self.cannyButton.clicked.connect(self.cannyMethod)

        self.binaryThresholdButton.clicked.connect(self.binaryThresholdMethod)
        self.adaptiveThresholdButton.clicked.connect(self.adaptiveThresholdMethod)
        self.otsuThresholdButton.clicked.connect(self.otsuThresholdMethod)

        self.openButton.clicked.connect(self.openMethod)
        self.closeButton.clicked.connect(self.closeMethod)
        self.erodeButton.clicked.connect(self.erodeMethod)
        self.dilateButton.clicked.connect(self.dilateMethod)

        # Flow Helper Functions
        self.resetButton.setEnabled(False)
        self.channelSelector.setEnabled(False)
        self.confirmButton.setEnabled(False)
        self.otsuThresholdButton.setEnabled(False)
        self.adaptiveThresholdButton.setEnabled(False)

        self.cmyButton.setEnabled(False)
        self.grayButton.setEnabled(False)
        self.hsvButton.setEnabled(False)
        self.luvButton.setEnabled(False)

        self.averageBlurButton.setEnabled(False)
        self.medianBlurButton.setEnabled(False)
        self.gaussianButton.setEnabled(False)
        self.sharpenButton.setEnabled(False)

        self.sobelButton.setEnabled(False)
        self.laplaceButton.setEnabled(False)
        self.logButton.setEnabled(False)
        self.cannyButton.setEnabled(False)

        self.binaryThresholdButton.setEnabled(False)
        self.adaptiveThresholdButton.setEnabled(False)
        self.otsuThresholdButton.setEnabled(False)

        self.erodeButton.setEnabled(False)
        self.dilateButton.setEnabled(False)
        self.openButton.setEnabled(False)
        self.closeButton.setEnabled(False)

    # Connect Functions
    def openImageButtonMethod(self):
        self.rgbImage = openImage()  # Will serve as raw image for RESET
        self.currentImage = self.rgbImage
        display = rescale(self.currentImage)
        self.imageLabel.setPixmap(display)

        # Once image is loaded, enable the channel selector and confirm button
        self.resetButton.setEnabled(True)
        self.channelSelector.setEnabled(True)
        self.confirmButton.setEnabled(True)

        self.cmyButton.setEnabled(True)
        self.grayButton.setEnabled(True)
        self.hsvButton.setEnabled(True)
        self.luvButton.setEnabled(True)

        self.averageBlurButton.setEnabled(True)
        self.medianBlurButton.setEnabled(True)
        self.gaussianButton.setEnabled(True)
        self.sharpenButton.setEnabled(True)

        self.sobelButton.setEnabled(True)
        self.laplaceButton.setEnabled(True)
        self.logButton.setEnabled(True)
        self.cannyButton.setEnabled(True)

        self.binaryThresholdButton.setEnabled(True)
        self.otsuThresholdButton.setEnabled(True)

        self.erodeButton.setEnabled(True)
        self.dilateButton.setEnabled(True)
        self.openButton.setEnabled(True)
        self.closeButton.setEnabled(True)

    def channelSelectorMethod(self, index):
        ch1, ch2, ch3 = cv2.split(self.currentImage)

        if index == 0:
            display = rescale(self.currentImage)
        if index == 1:
            display = rescaleOneChannel(ch1)
        if index == 2:
            display = rescaleOneChannel(ch2)
        if index == 3:
            display = rescaleOneChannel(ch3)

        self.imageLabel.setPixmap(display)

    def confirmImageMethod(self):
        index = self.channelSelector.currentIndex()
        ch1, ch2, ch3 = cv2.split(self.currentImage)

        if index == 1:
            self.otsuThresholdButton.setEnabled(True)
            self.adaptiveThresholdButton.setEnabled(True)
            self.currentImage = ch1
        if index == 2:
            self.otsuThresholdButton.setEnabled(True)
            self.adaptiveThresholdButton.setEnabled(True)
            self.currentImage = ch2
        if index == 3:
            self.otsuThresholdButton.setEnabled(True)
            self.adaptiveThresholdButton.setEnabled(True)
            self.currentImage = ch3

        self.channelSelector.setEnabled(False)
        self.confirmButton.setEnabled(False)

    def resetImageMethod(self):
        self.currentImage = self.rgbImage
        display = rescale(self.currentImage)
        self.imageLabel.setPixmap(display)

        self.confirmButton.setEnabled(True)
        self.channelSelector.setCurrentIndex(0)
        self.channelSelector.setEnabled(True)

    def cmyConvertMethod(self):
        C, M, Y = cmyConvert(self.rgbImage)
        self.currentImage = cv2.merge([C, M, Y])
        display = rescale(self.currentImage)
        self.imageLabel.setPixmap(display)

    def grayConvertMethod(self):
        self.currentImage = grayConvert(self.currentImage)
        display = rescaleOneChannel(self.currentImage)
        self.imageLabel.setPixmap(display)

        # Single channel, therefore channel selector should be disabled
        self.channelSelector.setEnabled(False)
        self.confirmButton.setEnabled(False)

    def hsvConvertMethod(self):
        H, S, V = hsvConvert(self.rgbImage)
        self.currentImage = cv2.merge([H, S, V])
        display = rescale(self.currentImage)
        self.imageLabel.setPixmap(display)

    def luvConvertMethod(self):
        L, U, V = luvConvert(self.rgbImage)
        self.currentImage = cv2.merge([L, U, V])
        display = rescale(self.currentImage)
        self.imageLabel.setPixmap(display)

    def averageBlurMethod(self):
        self.currentImage = averageBlur(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def medianBlurMethod(self):
        self.currentImage = medianBlur(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def gaussianBlurMethod(self):
        self.currentImage = gaussianBlur(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def sharpenMethod(self):
        self.currentImage = sharpen(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    ##############################################################################
    # EDGE DETECTION FUNCTIONS
    def laplacianMethod(self):
        self.currentImage = laplacian(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def sobelMethod(self):
        self.currentImage = sobel(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def logMethod(self):
        self.currentImage = log(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def cannyMethod(self):
        self.currentImage = canny(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    ##############################################################################
    # THRESHOLDING FUNCTIONS
    def binaryThresholdMethod(self):
        self.currentImage = binaryThreshold(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def adaptiveThresholdMethod(self):
        self.currentImage = adaptiveThreshold(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def otsuThresholdMethod(self):
        self.currentImage = otsuThreshold(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    ##############################################################################
    # THRESHOLDING FUNCTIONS
    def openMethod(self):
        self.currentImage = open(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def closeMethod(self):
        self.currentImage = close(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def erodeMethod(self):
        self.currentImage = erode(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def dilateMethod(self):
        self.currentImage = dilate(self.currentImage)
        if len(self.currentImage.shape) == 2:
            display = rescaleOneChannel(self.currentImage)
        else:
            display = rescale(self.currentImage)

        self.imageLabel.setPixmap(display)

    def retranslateUi(self, Analyzer):
        _translate = QtCore.QCoreApplication.translate
        Analyzer.setWindowTitle(_translate("Analyzer", "MainWindow"))
        self.resetButton.setText(_translate("Analyzer", "RESET"))
        self.channelSelector.setItemText(0, _translate("Analyzer", "Original"))
        self.channelSelector.setItemText(1, _translate("Analyzer", "Channel 1"))
        self.channelSelector.setItemText(2, _translate("Analyzer", "Channel 2"))
        self.channelSelector.setItemText(3, _translate("Analyzer", "Channel 3"))
        self.cmyButton.setText(_translate("Analyzer", "CMY"))
        self.grayButton.setText(_translate("Analyzer", "Grayscale"))
        self.hsvButton.setText(_translate("Analyzer", "HSV"))
        self.luvButton.setText(_translate("Analyzer", "LUV"))
        self.openImageButton.setText(_translate("Analyzer", "OPEN IMAGE"))
        self.averageBlurButton.setText(_translate("Analyzer", "Average"))
        self.medianBlurButton.setText(_translate("Analyzer", "Median"))
        self.gaussianButton.setText(_translate("Analyzer", "Gaussian"))
        self.sharpenButton.setText(_translate("Analyzer", "Sharpen"))
        self.binaryThresholdButton.setText(_translate("Analyzer", "Binary Threshold"))
        self.adaptiveThresholdButton.setText(
            _translate("Analyzer", "Adaptive Threshold")
        )
        self.otsuThresholdButton.setText(_translate("Analyzer", "Otsu Threshold"))
        self.sobelButton.setText(_translate("Analyzer", "Sobel"))
        self.logButton.setText(_translate("Analyzer", "LoG"))
        self.cannyButton.setText(_translate("Analyzer", "Canny"))
        self.laplaceButton.setText(_translate("Analyzer", "Laplace"))
        self.erodeButton.setText(_translate("Analyzer", "Erode"))
        self.dilateButton.setText(_translate("Analyzer", "Dilate"))
        self.openButton.setText(_translate("Analyzer", "Opening"))
        self.closeButton.setText(_translate("Analyzer", "Close"))
        self.confirmButton.setText(_translate("Analyzer", "Confirm"))
        self.openImageButton_2.setText(_translate("Analyzer", "SHOW CROPPED IMAGE"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Analyzer()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
